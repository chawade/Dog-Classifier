# import os

# folder_path = 'E:/DIP/Dog-Classifier/data/german_shepherd'
# new_name = 'german_shepherd'  # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà

# for index, filename in enumerate(os.listdir(folder_path)):
#     if filename.endswith(('.png', '.jpg', '.jpeg')):
#         new_filename = f"{new_name}_{index+1}{os.path.splitext(filename)[1]}"
#         os.rename(os.path.join(folder_path, filename), os.path.join(folder_path, new_filename))

# print("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

import os
import shutil
import random

def split_dataset(dataset_path, output_path, train_ratio=0.8, test_ratio=0.1, val_ratio=0.1):
    assert train_ratio + test_ratio + val_ratio == 1.0,"‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ 1.0"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    for split in ['train', 'test', 'val']:
        split_path = os.path.join(output_path, split)
        os.makedirs(split_path, exist_ok=True)

    # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏™
    for class_name in os.listdir(dataset_path):
        class_path = os.path.join(dataset_path, class_name)
        if not os.path.isdir(class_path):
            continue
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™
        images = os.listdir(class_path)
        random.shuffle(images)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
        total = len(images)
        train_count = int(total * train_ratio)
        test_count = int(total * test_ratio)
        val_count = total - train_count - test_count  # ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô validation
        
        # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        splits = {
            "train": images[:train_count],
            "test": images[train_count:train_count + test_count],
            "val": images[train_count + test_count:]
        }

        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        for split, split_images in splits.items():
            split_class_path = os.path.join(output_path, split, class_name)
            os.makedirs(split_class_path, exist_ok=True)
            for img in split_images:
                shutil.copy(os.path.join(class_path, img), os.path.join(split_class_path, img))

    print("üìÇ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

# ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
dataset_path = "app/dataset"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
output_path = "app/data"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á train/test/val

split_dataset(dataset_path, output_path)

